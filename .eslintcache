[{"C:\\Users\\takumi\\calendar\\src\\index.js":"1","C:\\Users\\takumi\\calendar\\src\\App.js":"2","C:\\Users\\takumi\\calendar\\src\\form.js":"3","C:\\Users\\takumi\\calendar\\src\\store\\index.js":"4","C:\\Users\\takumi\\calendar\\src\\components\\localStorage.js":"5","C:\\Users\\takumi\\calendar\\src\\components\\LocalStorage.js":"6","C:\\Users\\takumi\\Desktop\\calendar backup\\src\\index.js":"7","C:\\Users\\takumi\\Desktop\\calendar backup\\src\\App.js":"8","C:\\Users\\takumi\\Desktop\\calendar backup\\src\\components\\modal.js":"9","C:\\Users\\takumi\\Desktop\\calendar backup\\src\\components\\Modal.js":"10","C:\\Users\\takumi\\Desktop\\calendar backup\\src\\components\\function.js":"11"},{"size":314,"mtime":1615798829567,"results":"12","hashOfConfig":"13"},{"size":14616,"mtime":1615798665403,"results":"14","hashOfConfig":"13"},{"size":1563,"mtime":1612856435983,"results":"15","hashOfConfig":"13"},{"size":749,"mtime":1612855787878,"results":"16","hashOfConfig":"13"},{"size":638,"mtime":1615428811278,"results":"17","hashOfConfig":"13"},{"size":239,"mtime":1615798863426,"results":"18","hashOfConfig":"13"},{"size":231,"mtime":1618903113902,"results":"19","hashOfConfig":"20"},{"size":11887,"mtime":1618904200198,"results":"21","hashOfConfig":"20"},{"size":2084,"mtime":1618904021497,"results":"22","hashOfConfig":"20"},{"size":2073,"mtime":1618459600977,"results":"23","hashOfConfig":"24"},{"size":701,"mtime":1618904021485,"results":"25","hashOfConfig":"24"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"y8a8bw",{"filePath":"28","messages":"29","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},"1wvzljs",{"filePath":"44","messages":"45","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"43"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},"wdt5tn",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"C:\\Users\\takumi\\calendar\\src\\index.js",["57","58","59","60"],"C:\\Users\\takumi\\calendar\\src\\App.js",["61","62","63","64","65","66","67","68","69","70"],"C:\\Users\\takumi\\calendar\\src\\form.js",[],["71","72"],"C:\\Users\\takumi\\calendar\\src\\store\\index.js",[],["73","74"],"C:\\Users\\takumi\\calendar\\src\\components\\localStorage.js",["75","76"],"C:\\Users\\takumi\\calendar\\src\\components\\LocalStorage.js",[],"C:\\Users\\takumi\\Desktop\\calendar backup\\src\\index.js",["77","78"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from './App'\nimport styles from './style.css'\n\nconst Tool = () => (\n  <div>\n    <App />\n  </div>\n);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));",["79","80"],"C:\\Users\\takumi\\Desktop\\calendar backup\\src\\App.js",["81","82","83","84","85","86","87","88","89","90"],"import React from 'react'\nimport Calendar from 'react-calendar';\nimport Modal from \"./components/modal\"\n  \n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isSubmitted: true,\n      //月のデータ\n      month_days: {},\n      selectedDate: '',\n      backups: '',\n      formvalues: '',\n      start_hour: '',\n      start_minute: '',\n      end_hour: '',\n      end_minute: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.Start_timeMinutes = this.Start_timeMinutes.bind(this);\n    this.Start_timeHours = this.Start_timeHours.bind(this);\n    this.End_timeHours = this.End_timeHours.bind(this);\n    this.End_timeMinutes = this.End_timeMinutes.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.keepModal = this.keepModal.bind(this);\n  }\n\n  // state の日付と同じ表記に変換\n  getFormatDate(date) {\n    return `${date.getFullYear()}${('0' + (date.getMonth() + 1)).slice(-2)}${('0' + date.getDate()).slice(-2)}`;\n  }\n\n  //日付ブロックをクリックした時の処理\n  openModal(value, e) {\n    if (e.target.title === 'delete') {\n      this.setState({ isSubmitted: true })\n    } else {\n      this.setState({ isSubmitted: false })\n    }\n    this.setState({ selectedDate: value })\n  }\n\n  //モーダル内の×ボタンを押したときの処理\n  closeModal() {\n    this.setState({ isSubmitted: true })\n    this.setState({ backups: '' })\n    this.setState({ start_hour: '' })\n    this.setState({ start_minute: '' })\n    this.setState({ end_hour: '' })\n    this.setState({ end_minute: '' })\n    this.setState({ formvalues: '' })\n  }\n\n  keepModal(e) {\n    let modal_class = e.target.className\n    if (modal_class === 'modal-back')\n      this.closeModal()\n  }\n\n  //日付の内容を出力\n  getTileContent({ date, view }) {\n    // 月表示のときのみ\n    if (view !== 'month') {\n      return null;\n    }\n    //日付の形式を表示可能に変えてくれる\n    const day = this.getFormatDate(date);\n    return (\n      <p>\n        <br />\n        {\n          this.state.month_days[day] && this.state.month_days[day].map(date => {\n            return (\n              <div className='plans'>\n                <button className={day} id={date.id} title='delete' onClick={this.deleteState}>×</button>\n                <button className={day} id={date.id} onClick={this.editState}>{date.text}</button>\n                <br />\n              </div>\n            )\n          })\n        }\n      </p>\n    );\n  }\n\n  //ランダムなidの作成\n  getUniqueStr(myStrong) {\n    var strong = 1000;\n    if (myStrong) strong = myStrong;\n    return new Date().getTime().toString(16) + Math.floor(strong * Math.random()).toString(16)\n  }\n\n  //予定の内容を設定\n  handleChange(event) {\n    const value = event.target.value\n    this.setState({ formvalues: value })\n  }\n\n  //予定が始まる時間を設定（1時間単位）\n  Start_timeHours() {\n    let options = []\n    for (var i = 0; i <= 23; i++) {\n      options.push(<option value={i}>{i}</option>)\n    }\n    return (\n      <select defaultValue={this.state.backups[0]}\n        onChange={(e) => {\n          this.setState({ start_hour: e.target.value })\n        }} >\n        {options}\n      </select>\n    )\n  }\n\n  //予定が始まる時間を設定（10分単位）\n  Start_timeMinutes() {\n    let options = []\n    for (var i = 0; i <= 50; i++) {\n      let j = ('0' + i).slice(-2);\n      if (j % 10 == 0) {\n        options.push(<option value={j}>{j}</option>)\n      }\n    }\n    return (\n      <select defaultValue={this.state.backups[1]}\n        onChange={(e) => {\n          this.setState({ start_minute: e.target.value })\n        }}>\n        {options}\n      </select>\n    )\n  }\n\n\n\n  End_timeHours() {\n    let options = []\n    let limited_h = this.state.start_hour\n    let end_h = this.state.end_hour\n    let end_dh = this.state.backups[2]\n\n    if (!limited_h && !this.state.backups[0]) {\n    } else if (!limited_h && this.state.backups[0]) {\n      limited_h = this.state.backups[0]\n    }\n\n    if (!end_h && end_dh) {\n      end_h = end_dh\n    }\n\n    for (var i = 0; i <= 23; i++) {\n      if (i >= limited_h) {\n        if (i != end_h) {\n          options.push(<option value={i}>{i}</option>)\n        }\n        else if (i == end_h) {\n          options.push(<option value={i} selected>{i}</option>)\n        }\n      }\n    }\n\n    return (\n      <select defaultValue={this.state.backups[2]}\n        onChange={(e) => {\n          this.setState({ end_hour: e.target.value })\n        }}>\n        {options}\n      </select >\n    )\n  }\n\n  //予定が終わる時間を設定（1分単位）\n  End_timeMinutes() {\n    let options = []\n    let start_h = this.state.start_hour\n    let end_m = this.state.end_minute\n    let end_h = this.state.end_hour\n    let start_dh = this.state.backups[0]\n    let start_dm = this.state.backups[1]\n    let end_dh = this.state.backups[2]\n    let limited_start = ''\n    let limited_end = ''\n    let limited_minutes = this.state.start_minute\n\n    //分数制限の値の算出\n    if (!limited_minutes && start_dm) {\n      limited_minutes = start_dm\n    } else if (!limited_minutes && start_dm) {\n      limited_minutes = 0\n    }\n\n    //初めの時間を取得\n    if (!start_h && !start_dh) {\n      limited_start = ''\n    } else if (!start_h && start_dh) {\n      limited_start = start_dh\n    } else {\n      limited_start = start_h\n    }\n\n    //終わりの時間を取得\n    if (!end_h && !end_dh && !limited_start) {\n      limited_end = ''\n    } else if (!end_h && end_dh && !limited_start) {\n      limited_end = end_dh\n    } else if (!end_h && limited_start === start_dh) {\n      limited_end = start_dh\n    } else if (!end_h && start_h) {\n      limited_end = start_h\n    } else if (end_h && start_h > end_h) {\n      limited_end = limited_start\n    } else if (end_h) {\n      limited_end = end_h\n    }\n\n    if (limited_start !== limited_end) {\n      for (var i = 0; i <= 50; i++) {\n        if (i % 10 == 0) {\n          let j = ('0' + i).slice(-2);\n          if (i != end_m) {\n            options.push(<option value={j}>{j}</option>)\n          }\n          else {\n            options.push(<option value={j} selected>{j}</option>)\n          }\n        }\n      }\n    } else if (limited_start === limited_end) {\n      for (var i = 0; i <= 50; i++) {\n        if (i % 10 == 0 && i >= limited_minutes) {\n          let j = ('0' + i).slice(-2);\n          if (i != end_m) {\n            options.push(<option value={j}>{j}</option>)\n          }\n          else {\n            options.push(<option value={j} selected>{j}</option>)\n          }\n        }\n      }\n    }\n\n    return (\n      <select defaultValue={this.state.backups[3]}\n        onChange={(e) => this.setState({ end_minute: e.target.value })}>\n        {options}\n      </select>\n    )\n  }\n\n\n  //予定追加or予定編集処理\n  handleSubmit() {\n    this.setState({ isSubmitted: true })\n\n    let date = this.getFormatDate(new Date(this.state.selectedDate))\n\n    const copySate = this.state.month_days\n\n    const dates = Object.keys(copySate)\n\n    const index = dates.indexOf(date)\n\n    const random_id = this.getUniqueStr()\n\n    date = Number(date)\n\n\n    //stateを変数に代入\n    let start_h = this.state.start_hour\n    let start_m = this.state.start_minute\n    let end_h = this.state.end_hour\n    let end_m = this.state.end_minute\n    let form = this.state.formvalues\n\n    // 予定が始まる時間が空か確かめる（1時間単位）\n    if (!start_h && this.state.backups[0]) {\n      start_h = this.state.backups[0]\n    } else if (!start_h && !this.state.backups[0]) {\n      start_h = '0'\n    }\n\n    //予定が始まる時間が空か確かめる（1分単位）\n    if (!start_m && this.state.backups[1]) {\n      start_m = this.state.backups[1]\n    } else if (!start_m && !this.state.backups[1]) {\n      start_m = '00'\n    }\n\n    //予定が終わる時間が空か確かめる（1時間単位）\n    if (!end_h && this.state.backups[2]) {\n      if (this.state.start_hour > this.state.backups[2]) {\n        end_h = this.state.start_hour\n      } else {\n        end_h = this.state.backups[2]\n      }\n    } else if (!end_h && !this.state.backups[2] && start_h) {\n      end_h = start_h\n    }\n\n    //予定が終わる時間が空か確かめる（1分単位）\n    if (!end_m && this.state.backups[3]) {\n      end_m = this.state.backups[3]\n    } else if (!end_m && !this.state.backups[3] && start_m) {\n      end_m = start_m\n    }\n\n    //予定内容が空か確かめる\n    if (!form && this.state.backups[4]) {\n      form = this.state.backups[4]\n    } else if (!form && !this.state.backups[4]) {\n      form = ''\n    }\n\n    //入力処理の間違いを防ぐ\n    if (end_h < start_h) {\n      end_h = start_h\n    }\n    if (start_h === end_h && start_m > end_m) {\n      end_m = start_m\n    }\n\n    //予定の開始時間と終了時間を出力する表示に変更\n    let start_time = start_h + ':' + start_m\n    let end_time = end_h + ':' + end_m\n\n\n    if (!form && !this.state.backups[4]) {\n      alert('予定を入力して下さい')\n    }\n    else if (index !== -1) {\n      copySate[date].push({\n        id: random_id,\n        text: (start_time + '～' + end_time + '\\n' + form),\n        backup: [start_h, start_m, end_h, end_m, form]\n      })\n    }\n    else if (form && start_time !== ':' || end_time !== ':') {\n      copySate[date] = [\n        {\n          id: random_id,\n          text: (start_time + '～' + end_time + '\\n' + form),\n          backup: [start_h, start_m, end_h, end_m, form]\n        }\n      ]\n    }\n    this.setState({ month_days: copySate })\n    this.closeModal()\n  }\n\n  //予定を編集する処理\n  editState = (e) => {\n    const day = e.target.className\n    const key = e.target.id\n    const onedays = this.state.month_days[day]\n\n    for (let i = 0; i < onedays.length; i++) {\n      let oneday = onedays[i]\n      if (oneday.id === key) {\n        this.setState({ backups: [oneday.backup[0], oneday.backup[1], oneday.backup[2], oneday.backup[3], oneday.backup[4],] })\n        this.deleteState(e)\n      }\n    }\n  }\n\n  //予定を消す処理\n  deleteState = (e) => {\n    const day = e.target.className\n    const key = e.target.id\n    const id_copy = this.state.month_days[day]\n\n    for (let i = 0; i < id_copy.length; i++) {\n      if (id_copy[i].id === key) {\n        this.state.month_days[day].splice(i, 1);\n        break;\n      }\n    }\n    this.closeModal()\n  }\n\n  // もし前回のデータがあったら、ローカルストレージの値を取得し、更新する\n  componentDidMount() {\n    if (localStorage.app) {\n      const saveDate = JSON.parse(localStorage.app);\n      this.setState({\n        month_days: saveDate.month_days,\n      })\n    }\n  }\n\n  // stateが変更されたら実行\n  componentDidUpdate() {\n    // ローカルストレージにステートの情報を保存\n    localStorage.setItem('app', JSON.stringify(this.state));\n  }\n\n  render() {\n    const title = ({ date, view }) => this.getTileContent({ date, view })\n    return (\n      <>\n        <Calendar\n          locale=\"ja-JP\"\n          tileContent={title}\n          value={this.state.date}\n          onClickDay={this.openModal.bind(this)}\n        />\n        <Modal\n          isSubmitted={this.state.isSubmitted}\n          selectedDate={this.state.selectedDate}\n          formvalues={this.state.formvalues}\n          backups={this.state.backups}\n          closeModal={this.closeModal}\n          keepModal={this.keepModal}\n          handleChange={this.handleChange}\n          handleSubmit={this.handleSubmit}\n          deleteState={this.deleteState}\n          Start_timeHours={this.Start_timeHours}\n          Start_timeMinutes={this.Start_timeMinutes}\n          End_timeHours={this.End_timeHours}\n          End_timeMinutes={this.End_timeMinutes}\n        />\n      </>\n    );\n  }\n}","C:\\Users\\takumi\\Desktop\\calendar backup\\src\\components\\modal.js",["91"],"import React from 'react'\r\n\r\nclass Modal extends React.Component {\r\n\r\n  //モーダル上部に予定を入れようとしている日付を表示\r\n  formatDate(d) {\r\n    const date = new Date(d)\r\n    return date.getFullYear() + '年' + (date.getMonth() + 1) + '月' + date.getDate() + '日'\r\n  }\r\n\r\n  defaultForm() {\r\n    if (this.props.backups[4] !== null) {\r\n      return this.props.backups[4]\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let contactForm;\r\n    if (this.props.isSubmitted === false) {\r\n      contactForm = (\r\n        <form onSubmit={this.props.handleSubmit}>\r\n          <div className='modal-back'\r\n            onClick={this.props.keepModal}>\r\n            <div className='modal '>\r\n              <div className='modal-top'>\r\n                <button className='close-button'\r\n                  onClick={this.props.closeModal}\r\n                >×</button>\r\n                <div className='add-plans'>予定登録</div>\r\n              </div>\r\n              <div className='modal-main'>\r\n                <p>選択した日 : {this.formatDate(this.props.selectedDate)}</p>\r\n                <p className='plans-time'>予定時間</p>\r\n                <div className='time-box'>\r\n                  {this.props.Start_timeHours()}\r\n                  <p>:</p>\r\n                  {this.props.Start_timeMinutes()}\r\n                  <p>～</p>\r\n                  {this.props.End_timeHours()}\r\n                  <p>:</p>\r\n                  {this.props.End_timeMinutes()}\r\n                </div>\r\n                <p className='plans-content'>予定の内容</p>\r\n                <input defaultValue=''　required\r\n                  onChange={this.props.handleChange}\r\n                  defaultValue={this.defaultForm()}\r\n                />\r\n                <input\r\n                  className='submit-btn'\r\n                  type='submit'\r\n                  value='登録'\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form >\r\n      )\r\n    }\r\n    return (\r\n      <div>\r\n        {contactForm}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal","C:\\Users\\takumi\\Desktop\\calendar backup\\src\\components\\Modal.js",["92"],"import React from 'react'\r\n\r\nclass Modal extends React.Component {\r\n\r\n  //モーダル上部に予定を入れようとしている日付を表示\r\n  formatDate(d) {\r\n    const date = new Date(d)\r\n    return date.getFullYear() + '年' + (date.getMonth() + 1) + '月' + date.getDate() + '日'\r\n  }\r\n\r\n  defaultForm() {\r\n    if (this.props.backups[4] !== null) {\r\n      return this.props.backups[4]\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let contactForm;\r\n    if (this.props.isSubmitted === false) {\r\n      contactForm = (\r\n        <form onSubmit={this.props.handleSubmit}>\r\n          <div className='modal-back'\r\n            onClick={this.props.keepModal}>\r\n            <div className='modal '>\r\n              <div className='modal-top'>\r\n                <button className='close-button'\r\n                  onClick={this.props.closeModal}\r\n                >×</button>\r\n                <div className='add-plans'>予定登録</div>\r\n              </div>\r\n              <div className='modal-main'>\r\n                <p>選択した日 : {this.formatDate(this.props.selectedDate)}</p>\r\n                <p className='plans-time'>予定時間</p>\r\n                <div className='time-box'>\r\n                  {this.props.Start_timeHours()}\r\n                  <p>:</p>\r\n                  {this.props.Start_timeMinutes()}\r\n                  <p>～</p>\r\n                  {this.props.End_timeHours()}\r\n                  <p>:</p>\r\n                  {this.props.End_timeMinutes()}\r\n                </div>\r\n                <p className='plans-content'>予定の内容</p>\r\n                <input defaultValue=''\r\n                  onChange={this.props.handleChange}\r\n                  defaultValue={this.defaultForm()}\r\n                />\r\n                <input\r\n                  className='submit-btn'\r\n                  type='submit'\r\n                  value='登録'\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form >\r\n      )\r\n    }\r\n    return (\r\n      <div>\r\n        {contactForm}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal",["93","94"],"C:\\Users\\takumi\\Desktop\\calendar backup\\src\\components\\function.js",[],["95","96"],{"ruleId":"97","severity":1,"message":"98","line":3,"column":8,"nodeType":"99","messageId":"100","endLine":3,"endColumn":21},{"ruleId":"97","severity":1,"message":"101","line":4,"column":8,"nodeType":"99","messageId":"100","endLine":4,"endColumn":14},{"ruleId":"97","severity":1,"message":"102","line":6,"column":8,"nodeType":"99","messageId":"100","endLine":6,"endColumn":18},{"ruleId":"97","severity":1,"message":"103","line":8,"column":7,"nodeType":"99","messageId":"100","endLine":8,"endColumn":11},{"ruleId":"97","severity":1,"message":"104","line":115,"column":11,"nodeType":"99","messageId":"100","endLine":115,"endColumn":24},{"ruleId":"105","severity":1,"message":"106","line":135,"column":9,"nodeType":"107","endLine":135,"endColumn":30},{"ruleId":"105","severity":1,"message":"106","line":147,"column":11,"nodeType":"107","endLine":147,"endColumn":32},{"ruleId":"105","severity":1,"message":"106","line":161,"column":11,"nodeType":"107","endLine":161,"endColumn":32},{"ruleId":"105","severity":1,"message":"106","line":174,"column":11,"nodeType":"107","endLine":174,"endColumn":32},{"ruleId":"105","severity":1,"message":"106","line":186,"column":11,"nodeType":"107","endLine":186,"endColumn":32},{"ruleId":"105","severity":1,"message":"106","line":199,"column":11,"nodeType":"107","endLine":199,"endColumn":32},{"ruleId":"105","severity":1,"message":"106","line":212,"column":11,"nodeType":"107","endLine":212,"endColumn":32},{"ruleId":"105","severity":1,"message":"106","line":224,"column":11,"nodeType":"107","endLine":224,"endColumn":32},{"ruleId":"105","severity":1,"message":"106","line":243,"column":9,"nodeType":"107","endLine":243,"endColumn":30},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"108","replacedBy":"112"},{"ruleId":"110","replacedBy":"113"},{"ruleId":"97","severity":1,"message":"114","line":2,"column":8,"nodeType":"99","messageId":"100","endLine":2,"endColumn":13},{"ruleId":"115","severity":2,"message":"116","line":4,"column":38,"nodeType":"99","messageId":"117","endLine":4,"endColumn":47},{"ruleId":"97","severity":1,"message":"101","line":4,"column":8,"nodeType":"99","messageId":"100","endLine":4,"endColumn":14},{"ruleId":"97","severity":1,"message":"103","line":6,"column":7,"nodeType":"99","messageId":"100","endLine":6,"endColumn":11},{"ruleId":"108","replacedBy":"118"},{"ruleId":"110","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":123,"column":18,"nodeType":"122","messageId":"123","endLine":123,"endColumn":20},{"ruleId":"120","severity":1,"message":"124","line":156,"column":15,"nodeType":"122","messageId":"123","endLine":156,"endColumn":17},{"ruleId":"120","severity":1,"message":"121","line":159,"column":20,"nodeType":"122","messageId":"123","endLine":159,"endColumn":22},{"ruleId":"120","severity":1,"message":"121","line":221,"column":20,"nodeType":"122","messageId":"123","endLine":221,"endColumn":22},{"ruleId":"120","severity":1,"message":"124","line":223,"column":17,"nodeType":"122","messageId":"123","endLine":223,"endColumn":19},{"ruleId":"125","severity":1,"message":"126","line":232,"column":16,"nodeType":"99","messageId":"127","endLine":232,"endColumn":17},{"ruleId":"120","severity":1,"message":"121","line":233,"column":20,"nodeType":"122","messageId":"123","endLine":233,"endColumn":22},{"ruleId":"120","severity":1,"message":"124","line":235,"column":17,"nodeType":"122","messageId":"123","endLine":235,"endColumn":19},{"ruleId":"128","severity":1,"message":"129","line":340,"column":19,"nodeType":"130","messageId":"131","endLine":340,"endColumn":21},{"ruleId":"128","severity":1,"message":"129","line":340,"column":41,"nodeType":"130","messageId":"131","endLine":340,"endColumn":43},{"ruleId":"132","severity":1,"message":"133","line":46,"column":19,"nodeType":"134","endLine":46,"endColumn":52},{"ruleId":"132","severity":1,"message":"133","line":46,"column":19,"nodeType":"134","endLine":46,"endColumn":52},{"ruleId":"108","replacedBy":"135"},{"ruleId":"110","replacedBy":"136"},{"ruleId":"108","replacedBy":"137"},{"ruleId":"110","replacedBy":"138"},"no-unused-vars","'CalendarBoard' is defined but never used.","Identifier","unusedVar","'styles' is defined but never used.","'RenderList' is defined but never used.","'Tool' is assigned a value but never used.","'newMonth_days' is assigned a value but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-native-reassign",["139"],"no-negated-in-lhs",["140"],["139"],["140"],"'react' is defined but never used.","no-undef","'Component' is not defined.","undef",["139"],["140"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-redeclare","'i' is already defined.","redeclared","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["139"],["140"],["139"],["140"],"no-global-assign","no-unsafe-negation"]