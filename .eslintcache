[{"C:\\Users\\takumi\\calendar\\src\\index.js":"1","C:\\Users\\takumi\\calendar\\src\\App.js":"2","C:\\Users\\takumi\\calendar\\src\\form.js":"3","C:\\Users\\takumi\\calendar\\src\\store\\index.js":"4","C:\\Users\\takumi\\calendar\\src\\components\\localStorage.js":"5","C:\\Users\\takumi\\calendar\\src\\components\\LocalStorage.js":"6","C:\\Users\\takumi\\Desktop\\calendar backup\\src\\index.js":"7","C:\\Users\\takumi\\Desktop\\calendar backup\\src\\App.js":"8","C:\\Users\\takumi\\Desktop\\calendar backup\\src\\store\\index.js":"9","C:\\Users\\takumi\\Desktop\\calendar backup\\src\\components\\modal.js":"10"},{"size":314,"mtime":1615798829567,"results":"11","hashOfConfig":"12"},{"size":14616,"mtime":1615798665403,"results":"13","hashOfConfig":"12"},{"size":1563,"mtime":1612856435983,"results":"14","hashOfConfig":"12"},{"size":749,"mtime":1612855787878,"results":"15","hashOfConfig":"12"},{"size":638,"mtime":1615428811278,"results":"16","hashOfConfig":"12"},{"size":239,"mtime":1615798863426,"results":"17","hashOfConfig":"12"},{"size":231,"mtime":1615854617579,"results":"18","hashOfConfig":"19"},{"size":12183,"mtime":1617090597892,"results":"20","hashOfConfig":"19"},{"size":749,"mtime":1612855787878,"results":"21","hashOfConfig":"19"},{"size":1592,"mtime":1616049971313,"results":"22","hashOfConfig":"19"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"y8a8bw",{"filePath":"25","messages":"26","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},"wdt5tn",{"filePath":"41","messages":"42","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},"C:\\Users\\takumi\\calendar\\src\\index.js",["51","52","53","54"],"C:\\Users\\takumi\\calendar\\src\\App.js",["55","56","57","58","59","60","61","62","63","64"],"C:\\Users\\takumi\\calendar\\src\\form.js",[],["65","66"],"C:\\Users\\takumi\\calendar\\src\\store\\index.js",[],["67","68"],"C:\\Users\\takumi\\calendar\\src\\components\\localStorage.js",["69","70"],"C:\\Users\\takumi\\calendar\\src\\components\\LocalStorage.js",[],"C:\\Users\\takumi\\Desktop\\calendar backup\\src\\index.js",["71","72"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport styles from './style.css'\nimport App from './App'\n\nconst Tool = () => (\n  <div>\n    <App />\n  </div>\n);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));",["73","74"],"C:\\Users\\takumi\\Desktop\\calendar backup\\src\\App.js",["75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90"],"import React from 'react'\nimport Calendar from 'react-calendar';\nimport Modal from \"./components/modal\"\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date(2021, 3, 0),\n      isSubmitted: true,\n      //月のデータ\n      month_days: {},\n      selectedDate: null,\n      backups: '',\n      formvalues: '',\n      start_hour: '',\n      start_minitue: '',\n      end_hour: '',\n      end_minitue: '',\n      delite: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.Start_timeMinutes = this.Start_timeMinutes.bind(this);\n    this.Start_timeHours = this.Start_timeHours.bind(this);\n    this.End_timeHours = this.End_timeHours.bind(this);\n    this.End_timeMinutes = this.End_timeMinutes.bind(this);\n  }\n\n\n  // state の日付と同じ表記に変換\n  getFormatDate(date) {\n    return `${date.getFullYear()}${('0' + (date.getMonth() + 1)).slice(-2)}${('0' + date.getDate()).slice(-2)}`;\n  }\n\n  //日付ブロックをクリックした際の処理\n  handleSubmit_reverse(value) {\n    //モーダルの表示\n    this.setState({ isSubmitted: false })\n    //選択した日の年月日を取得(valueの中には元からクリックされた日付が入ってる)\n    this.setState({ selectedDate: value })\n  }\n\n  //日付の内容を出力\n  getTileContent({ date, view }) {\n    // 月表示のときのみ\n    if (view !== 'month') {\n      return null;\n    }\n    //日付の形式を表示可能に変えてくれる\n    const day = this.getFormatDate(date);\n    return (\n      <p>\n        <br />\n        {\n          this.state.month_days[day] && this.state.month_days[day].map(date => {\n            return (\n              <div className='box'>\n                <button className={day} id={date.id} onClick={this.deliteState}>×</button>\n                <button className={day} id={date.id} onClick={this.editState}>{date.text}</button>\n                <br />\n              </div>\n            )\n          })\n        }\n      </p>\n    );\n  }\n\n  //ランダムなidの作成\n  getUniqueStr(myStrong) {\n    var strong = 1000;\n    if (myStrong) strong = myStrong;\n    return new Date().getTime().toString(16) + Math.floor(strong * Math.random()).toString(16)\n  }\n\n  //予定の値を設定\n  handleChange(event) {\n    const value = event.target.value\n    this.setState({ formvalues: value })\n  }\n\n  //予定が始まる時間を設定（1時間単位）\n  Start_timeHours() {\n    let options = []\n    for (var i = 0; i <= 23; i++) {\n      options.push(<option value={i}>{i}</option>)\n    }\n    return (\n      <select defaultValue={this.state.backups[0]}\n        onChange={(e) => this.setState({ start_hour: e.target.value })} >\n        {options}\n      </select>\n    )\n  }\n\n  //予定が始まる時間を設定（1分単位）\n  Start_timeMinutes() {\n    let options = []\n    for (var i = 0; i <= 50; i++) {\n      if (i % 10 == 0) {\n        options.push(<option value={i}>{i}</option>)\n      }\n    }\n    return (\n      <select defaultValue={this.state.backups[1]}\n        onChange={(e) => this.setState({ start_minitue: e.target.value })}>\n        {options}\n      </select>\n    )\n  }\n\n  End_timeHours() {\n    let options = []\n    let limited_hours = this.state.start_hour\n\n    if (limited_hours === '' && this.state.backups[0] === undefined) {\n      //処理なし⇒初めて予定を入れる際に時間の入力制限をかけたくないので必要なif文\n    } else if (limited_hours === '' && this.state.backups[0] !== '') {\n      limited_hours = this.state.backups[0]\n    }\n\n    for (var i = 0; i <= 23; i++) {\n      if (i >= limited_hours) {\n        options.push(<option value={i}>{i}</option>)\n      }\n    }\n\n    return (\n      <select defaultValue={this.state.backups[2]}\n        onChange={(e) => this.setState({ end_hour: e.target.value })}>\n        {options}\n      </select >\n    )\n  }\n\n\n\n  //予定が終わる時間を設定（1分単位）\n  End_timeMinutes() {\n    let options = []\n    let limited_minutes = this.state.start_minitue\n    let start_h = this.state.start_hour\n    let end_h = this.state.end_hour\n    let end_m = this.state.backups[1]\n    let decide = 'a'\n\n    //初めのhourで終わりが規定されてしまうから一緒\n    if (start_h !== '' && end_h === '') {\n      decide = 'b'\n    }//どっちも値自体は入っていて違う値 \n    else if (start_h !== end_h) {\n      decide = 'c'\n    } //どっちも値自体は入っていて同じ値 \n    else if (start_h === end_h) {\n      decide = 'd'\n    }\n\n    if (this.state.backups[0] === '' && this.state.backups[0] === this.state.backups[2]) {\n      decide = 'e'\n    }\n\n    // console.log(decide)\n    // console.log(this.state.backups[0])\n    // console.log(this.state.backups[2])\n    // console.log(this.state.backups[1])\n\n\n    if (decide === 'b' || decide === 'd') {\n      for (var i = 0; i <= 50; i++) {\n        if (i % 10 == 0 && i >= limited_minutes) {\n          options.push(<option value={i}>{i}</option>)\n        }\n      }\n    } else if (decide === 'a' || decide === 'c') {\n      for (var i = 0; i <= 50; i++) {\n        if (i % 10 == 0) {\n          options.push(<option value={i}>{i}</option>)\n        }\n      }\n    } else if (decide === 'e') {\n      for (var i = 0; i <= 50; i++) {\n        if (i % 10 == 0 && i >= end_m) {\n          options.push(<option value={i}>{i}</option>)\n        }\n      }\n    }\n\n    return (\n      <select defaultValue={this.state.backups[3]}\n        onChange={(e) => this.setState({ end_minitue: e.target.value })}>\n        {options}\n      </select>\n    )\n  }\n\n  // shot(a, b, c, d, e, f, g, h, i){\n  //   if (a === '' && b !== undefined) {\n  //     a = b\n  //   } else if (a === '' && b == undefined) {\n  //     a = ''\n  //   }\n  // }\n\n\n  //予定追加or予定編集処理\n  handleSubmit() {\n    //モーダルの非表示\n    this.setState({ isSubmitted: true })\n\n    //空のnewMonth_daysを作成+元のmonth_daysに追加\n    const newMonth_days = []\n    const date = this.getFormatDate(new Date(this.state.selectedDate))\n\n    const copySate = this.state.month_days\n\n    const dates = Object.keys(copySate)\n\n    const index = dates.indexOf(date)\n\n    const random_id = this.getUniqueStr()\n\n    //stateを変数に代入\n    let start_h = this.state.start_hour\n    let start_m = this.state.start_minitue\n    let end_h = this.state.end_hour\n    let end_m = this.state.end_minitue\n    let form = this.state.formvalues\n\n    // 処理を関数化して引数でできないかな\n    // 予定が始まる時間が空か確かめる（1時間単位）\n    if (start_h === '' && this.state.backups[0] !== undefined) {\n      start_h = this.state.backups[0]\n    } else if (start_h === '' && this.state.backups[0] == undefined) {\n      start_h = '0'\n    }\n\n    //予定が始まる時間が空か確かめる（1分単位）\n    if (start_m === '' && this.state.backups[1] !== undefined) {\n      start_m = this.state.backups[1]\n    } else if (start_m === '' && this.state.backups[1] == undefined) {\n      start_m = '00'\n    }\n\n    //予定が終わる時間が空か確かめる（1時間単位）\n    if (end_h === '' && this.state.backups[2] !== undefined) {\n      end_h = this.state.backups[2]\n    } else if (end_h === '' && this.state.backups[2] == undefined && start_h !== '') {\n      end_h = start_h\n    }\n\n    //予定が終わる時間が空か確かめる（1分単位）\n    if (end_m === '' && this.state.backups[3] !== undefined) {\n      end_m = this.state.backups[3]\n    } else if (end_m === '' && this.state.backups[3] == undefined && start_m !== '') {\n      end_m = start_m\n    }\n\n    //入力内容が空か確かめる\n    if (form === '' && this.state.backups[4] !== '') {\n      form = this.state.backups[4]\n    } else if (form === '' && this.state.backups[4] == '') {\n      form = ''\n    }\n\n\n    //予定の開始時間と終了時間を出力する表示に変更\n    let start_time = start_h + ':' + start_m\n    let end_time = end_h + ':' + end_m\n\n    if (this.state.delite === 'd') { }\n    else if (this.state.formvalues === '' && this.state.backups[4] === '') { alert('予定を入力して下さい') }\n    if (index !== -1 && start_time !== ':' || end_time !== ':') {\n      copySate[date].push({\n        id: random_id,\n        text: (start_time + '～' + end_time + '\\n' + form),\n        backup: [start_h, start_m, end_h, end_m, form]\n      })\n    } else {\n      if (this.state.delite === 'd') { }\n      else if (this.state.formvalues === '' && this.state.backups[4] === '') { alert('予定を入力して下さい') }\n      if (this.state.formvalues !== \"\" && start_time !== ':' || end_time !== ':') {\n        //newMonth_daysの保存値をセット\n        copySate[date] = [\n          //formvaluesはformの入力値\n          {\n            id: random_id,\n            text: (start_time + '～' + end_time + '\\n' + form),\n            backup: [start_h, start_m, end_h, end_m, form]\n          }\n        ]\n      }\n    }\n    this.setState({ month_days: copySate })\n    this.setState({ backups: '' })\n    this.setState({ start_hour: '' })\n    this.setState({ start_minitue: '' })\n    this.setState({ end_hour: '' })\n    this.setState({ end_minitue: '' })\n    this.setState({ formvalues: '' })\n    this.setState({ delite: '' })\n    // console.log(this.state.month_days[date][0].backup)\n  }\n\n  //予定を編集する処理\n  editState = (e) => {\n    const day = e.target.className\n    const key = e.target.id\n    const ids = []\n    const id_copy = this.state.month_days[day]\n\n    for (let i = 0; i < this.state.month_days[day].length; i++) {\n      ids.push(id_copy[i].id)\n    }\n    for (let i = 0; i < ids.length; i++) {\n      if (ids[i] === key) {\n        this.setState({ backups: [this.state.month_days[day][i].backup[0], this.state.month_days[day][i].backup[1], this.state.month_days[day][i].backup[2], this.state.month_days[day][i].backup[3], this.state.month_days[day][i].backup[4],] })\n        this.deliteState(e)\n        this.setState({ delite: '' })\n      }\n    }\n  }\n\n  //予定を消す処理\n  deliteState = (e) => {\n    const day = e.target.className\n    const key = e.target.id\n    const ids = []\n    const id_copy = this.state.month_days[day]\n    this.setState({ start_hour: '' })\n    this.setState({ start_minitue: '' })\n    this.setState({ end_hour: '' })\n    this.setState({ end_minitue: '' })\n    this.setState({ formvalues: '' })\n    this.setState({ delite: 'd' })\n\n    for (let i = 0; i < this.state.month_days[day].length; i++) {\n      ids.push(id_copy[i].id)\n    }\n\n    for (let i = 0; i < ids.length; i++) {\n      if (ids[i] === key) {\n        this.state.month_days[day].splice(i);\n        break;\n      }\n    }\n  }\n\n  // もし前回のデータがあったら、ローカルストレージの値を取得し、更新する\n  componentDidMount() {\n    if (localStorage.app) {\n      const saveDate = JSON.parse(localStorage.app);\n      this.setState({\n        month_days: saveDate.month_days,\n      })\n    }\n  }\n\n  // stateが変更されたら実行\n  componentDidUpdate() {\n    // ローカルストレージにステートの情報を保存\n    localStorage.setItem('app', JSON.stringify(this.state));\n    // localStorage.clear()\n  }\n\n  render() {\n    const title = ({ date, view }) => this.getTileContent({ date, view })\n    return (\n      <>\n        <Calendar\n          locale=\"ja-JP\"\n          value={this.state.date}\n          tileContent={title}\n          onClickDay={this.handleSubmit_reverse.bind(this)}\n        />\n        <Modal\n          isSubmitted={this.state.isSubmitted}\n          selectedDate={this.state.selectedDate}\n          formvalues={this.state.formvalues}\n          backups={this.state.backups}\n          handleChange={this.handleChange}\n          handleSubmit={this.handleSubmit}\n          deliteState={this.deliteState}\n          Start_timeHours={this.Start_timeHours}\n          Start_timeMinutes={this.Start_timeMinutes}\n          End_timeHours={this.End_timeHours}\n          End_timeMinutes={this.End_timeMinutes}\n        />\n        <p>絶対にやること<br />メソッド名を正しく設定する\n        </p>\n      </>\n    );\n  }\n}","C:\\Users\\takumi\\Desktop\\calendar backup\\src\\store\\index.js",[],["91","92"],"C:\\Users\\takumi\\Desktop\\calendar backup\\src\\components\\modal.js",["93"],"import React from 'react'\r\n\r\nclass Modal extends React.Component {\r\n\r\n  //選択した日付を年月日の形にし、値を返す\r\n  formatdDate(d) {\r\n    const date = new Date(d)\r\n    return date.getFullYear() + '年' + (date.getMonth() + 1) + '月' + date.getDate() + '日'\r\n  }\r\n\r\n  defalutForm() {\r\n    if (this.props.backups[4] !== null) {\r\n      return this.props.backups[4]\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let contactForm;\r\n    if (this.props.isSubmitted === false) {\r\n      contactForm = (\r\n        <form onSubmit={this.props.handleSubmit}>\r\n          <div className='test'>\r\n            <div className='content'>\r\n              <p>{this.formatdDate(this.props.selectedDate)}</p>\r\n              <p>開始時間</p>\r\n              <div className='time-box'>\r\n                {this.props.Start_timeHours()}\r\n                <p>:</p>\r\n                {this.props.Start_timeMinutes()}\r\n                <p>～</p>\r\n                {this.props.End_timeHours()}\r\n                <p>:</p>\r\n                {this.props.End_timeMinutes()}\r\n              </div>\r\n              <div className='time-box'>\r\n              </div>\r\n              <p>予定</p>\r\n              <input defaultValue=''\r\n                onChange={this.props.handleChange}\r\n                defaultValue={this.defalutForm()}\r\n              />\r\n              <input\r\n                type='submit'\r\n                value='登録'\r\n              />\r\n            </div>\r\n          </div>\r\n        </form >\r\n      )\r\n    }\r\n    return (\r\n      <div>\r\n        {contactForm}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal",["94","95"],{"ruleId":"96","severity":1,"message":"97","line":3,"column":8,"nodeType":"98","messageId":"99","endLine":3,"endColumn":21},{"ruleId":"96","severity":1,"message":"100","line":4,"column":8,"nodeType":"98","messageId":"99","endLine":4,"endColumn":14},{"ruleId":"96","severity":1,"message":"101","line":6,"column":8,"nodeType":"98","messageId":"99","endLine":6,"endColumn":18},{"ruleId":"96","severity":1,"message":"102","line":8,"column":7,"nodeType":"98","messageId":"99","endLine":8,"endColumn":11},{"ruleId":"96","severity":1,"message":"103","line":115,"column":11,"nodeType":"98","messageId":"99","endLine":115,"endColumn":24},{"ruleId":"104","severity":1,"message":"105","line":135,"column":9,"nodeType":"106","endLine":135,"endColumn":30},{"ruleId":"104","severity":1,"message":"105","line":147,"column":11,"nodeType":"106","endLine":147,"endColumn":32},{"ruleId":"104","severity":1,"message":"105","line":161,"column":11,"nodeType":"106","endLine":161,"endColumn":32},{"ruleId":"104","severity":1,"message":"105","line":174,"column":11,"nodeType":"106","endLine":174,"endColumn":32},{"ruleId":"104","severity":1,"message":"105","line":186,"column":11,"nodeType":"106","endLine":186,"endColumn":32},{"ruleId":"104","severity":1,"message":"105","line":199,"column":11,"nodeType":"106","endLine":199,"endColumn":32},{"ruleId":"104","severity":1,"message":"105","line":212,"column":11,"nodeType":"106","endLine":212,"endColumn":32},{"ruleId":"104","severity":1,"message":"105","line":224,"column":11,"nodeType":"106","endLine":224,"endColumn":32},{"ruleId":"104","severity":1,"message":"105","line":243,"column":9,"nodeType":"106","endLine":243,"endColumn":30},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"107","replacedBy":"111"},{"ruleId":"109","replacedBy":"112"},{"ruleId":"96","severity":1,"message":"113","line":2,"column":8,"nodeType":"98","messageId":"99","endLine":2,"endColumn":13},{"ruleId":"114","severity":2,"message":"115","line":4,"column":38,"nodeType":"98","messageId":"116","endLine":4,"endColumn":47},{"ruleId":"96","severity":1,"message":"100","line":3,"column":8,"nodeType":"98","messageId":"99","endLine":3,"endColumn":14},{"ruleId":"96","severity":1,"message":"102","line":6,"column":7,"nodeType":"98","messageId":"99","endLine":6,"endColumn":11},{"ruleId":"107","replacedBy":"117"},{"ruleId":"109","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":101,"column":18,"nodeType":"121","messageId":"122","endLine":101,"endColumn":20},{"ruleId":"119","severity":1,"message":"120","line":171,"column":20,"nodeType":"121","messageId":"122","endLine":171,"endColumn":22},{"ruleId":"123","severity":1,"message":"124","line":176,"column":16,"nodeType":"98","messageId":"125","endLine":176,"endColumn":17},{"ruleId":"119","severity":1,"message":"120","line":177,"column":20,"nodeType":"121","messageId":"122","endLine":177,"endColumn":22},{"ruleId":"123","severity":1,"message":"124","line":182,"column":16,"nodeType":"98","messageId":"125","endLine":182,"endColumn":17},{"ruleId":"119","severity":1,"message":"120","line":183,"column":20,"nodeType":"121","messageId":"122","endLine":183,"endColumn":22},{"ruleId":"96","severity":1,"message":"103","line":212,"column":11,"nodeType":"98","messageId":"99","endLine":212,"endColumn":24},{"ruleId":"119","severity":1,"message":"120","line":234,"column":56,"nodeType":"121","messageId":"122","endLine":234,"endColumn":58},{"ruleId":"119","severity":1,"message":"120","line":241,"column":56,"nodeType":"121","messageId":"122","endLine":241,"endColumn":58},{"ruleId":"119","severity":1,"message":"120","line":248,"column":54,"nodeType":"121","messageId":"122","endLine":248,"endColumn":56},{"ruleId":"119","severity":1,"message":"120","line":255,"column":54,"nodeType":"121","messageId":"122","endLine":255,"endColumn":56},{"ruleId":"119","severity":1,"message":"120","line":262,"column":53,"nodeType":"121","messageId":"122","endLine":262,"endColumn":55},{"ruleId":"126","severity":1,"message":"127","line":273,"column":22,"nodeType":"128","messageId":"129","endLine":273,"endColumn":24},{"ruleId":"126","severity":1,"message":"127","line":273,"column":44,"nodeType":"128","messageId":"129","endLine":273,"endColumn":46},{"ruleId":"126","severity":1,"message":"127","line":282,"column":40,"nodeType":"128","messageId":"129","endLine":282,"endColumn":42},{"ruleId":"126","severity":1,"message":"127","line":282,"column":62,"nodeType":"128","messageId":"129","endLine":282,"endColumn":64},{"ruleId":"107","replacedBy":"130"},{"ruleId":"109","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":40,"column":17,"nodeType":"134","endLine":40,"endColumn":50},{"ruleId":"107","replacedBy":"135"},{"ruleId":"109","replacedBy":"136"},"no-unused-vars","'CalendarBoard' is defined but never used.","Identifier","unusedVar","'styles' is defined but never used.","'RenderList' is defined but never used.","'Tool' is assigned a value but never used.","'newMonth_days' is assigned a value but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-native-reassign",["137"],"no-negated-in-lhs",["138"],["137"],["138"],"'react' is defined but never used.","no-undef","'Component' is not defined.","undef",["137"],["138"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'i' is already defined.","redeclared","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator",["137"],["138"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["137"],["138"],"no-global-assign","no-unsafe-negation"]